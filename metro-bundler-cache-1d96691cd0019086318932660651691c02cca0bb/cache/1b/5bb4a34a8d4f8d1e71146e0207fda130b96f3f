Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react2 = require("react");

var _react3 = _interopRequireDefault(_react2);

var _index = require("./node_modules/react-transform-hmr/lib/index.js");

var _index2 = _interopRequireDefault(_index);

var _jsxFileName = "/var/www/mobile/SDCAConnectMobile/App.js";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _setup = require("./src/boot/setup");

var _setup2 = _interopRequireDefault(_setup);

var _login = require("./src/screens/login");

var _login2 = _interopRequireDefault(_login);

var _splashscreen = require("./src/screens/splashscreen");

var _splashscreen2 = _interopRequireDefault(_splashscreen);

var _reactNative = require("react-native");

var _nativeBase = require("native-base");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _components = {
  App: {
    displayName: "App"
  }
};

var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
  filename: "/var/www/mobile/SDCAConnectMobile/App.js",
  components: _components,
  locals: [module],
  imports: [_react3.default]
});

function _wrapComponent(id) {
  return function (Component) {
    return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
  };
}

var App = _wrapComponent("App")(function (_React$Component) {
  _inherits(App, _React$Component);

  function App(props) {
    _classCallCheck(this, App);

    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

    _this.state = { loading: true, authenticated: false };
    return _this;
  }

  _createClass(App, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var authenticationToken;
      return regeneratorRuntime.async(function componentDidMount$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(Expo.Font.loadAsync({
                'Roboto': require("native-base/Fonts/Roboto.ttf"),
                'Roboto_medium': require("native-base/Fonts/Roboto_medium.ttf")
              }));

            case 2:
              _context.next = 4;
              return regeneratorRuntime.awrap(_reactNative.AsyncStorage.getItem('@Connect:AuthToken'));

            case 4:
              authenticationToken = _context.sent;

              if (authenticationToken) {
                this.setState({ authenticated: true });
                console.log('authenticated, will lookup user from server later');
              }

              this.setState({ loading: false });

              console.log('component finished mounting');

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.loading) {
        return _react3.default.createElement(
          _nativeBase.Root,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 43
            }
          },
          _react3.default.createElement(_splashscreen2.default, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 44
            }
          })
        );
      } else if (!this.state.authenticated) {
        return _react3.default.createElement(_login2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 48
          }
        });
      } else {
        return _react3.default.createElement(_setup2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 50
          }
        });
      }
    }
  }]);

  return App;
}(_react3.default.Component));

exports.default = App;